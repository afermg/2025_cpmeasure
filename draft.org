#+bibliography: icml2025.bib
# #+cite_export: natbib
#+OPTIONS: toc:nil author:nil title:nil ^:nil date:nil
#+LATEX_CLASS: article-minimal
#+LATEX_HEADER: \input{header.tex}

#+begin_export latex
\twocolumn[
\icmltitle{Morphological profiling for computer scientists}

% It is OKAY to include author information, even for blind
% submissions: the style file will automatically remove it for you
% unless you've provided the [accepted] option to the icml2025
% package.

% List of affiliations: The first argument should be a (short)
% identifier you will use later to specify author affiliations
% Academic affiliations should list Department, University, City, Region, Country
% Industry affiliations should list Company, City, Region, Country

% You can specify symbols, otherwise they are numbered in order.
% Ideally, you should not use this facility. Affiliations will be numbered
% in order of appearance and this is the preferred way.
\icmlsetsymbol{equal}{*}

\begin{icmlauthorlist}
\icmlauthor{Alan F. Munoz}{equal,broad}
\icmlauthor{Tim Treis}{hh,broad}
\icmlauthor{Shantanu Singh}{broad}
\icmlauthor{Anne E. Carpenter}{broad}
\end{icmlauthorlist}

\icmlaffiliation{broad}{Broad Institute of MIT and Harvard}
\icmlaffiliation{hh}{Helmholtz, Munich, Germany}

\icmlcorrespondingauthor{Shantanu Singh}{shantanu@broadinstitute.org}

% You may provide any keywords that you
% find helpful for describing your paper; these are used to populate
% the "keywords" metadata in the PDF but will not be shown in the document
\icmlkeywords{Machine Learning, ICML}

\vskip 0.3in
]

% this must go after the closing bracket ] following \twocolumn[ ...

% This command actually creates the footnote in the first column
% listing the affiliations and the copyright notice.
% The command takes one argument, which is text to display at the start of the footnote.
% The \icmlEqualContribution command is standard text for equal contribution.
% Remove it (just {}) if you do not need this facility.

\printAffiliationsAndNotice{}  % leave blank if no need to mention equal contribution
% \printAffiliationsAndNotice{\icmlEqualContribution} % otherwise use the standard text.

#+end_export

#+begin_export latex
\begin{abstract}
Cellprofiler importance and limitations.
 Introduce a new library to automate CellProfiler measurements
 Highlight accessibility for computational biologists and computer scientists
\end{abstract}
#+end_export

* Morphological profiling in a nutshell
# What is morphological profiling
The field of morphological profiling uses data from cell microscopy images to obtain biological insights and, among other applications, accelerate drug discovery aided by machine and deep learning approaches in addition to traditional statistical methods.

# Current limitations of the field
A small subset of the features is provided by scikit-image, but this is greatly limited and cannot be reliably compared to the existing body of work that used CellProfiler to obtain the measurements. The other big problem of CellProfiler is its dependency on human interaction at many steps of the analysis, opening the door to human mistakes and hindering analyses reproducibility.

# What is CP
The most widely-used software to process biological imaging data is CellProfiler [cite:@stirlingCellProfiler4Improvements2021]. The target users for this are biologists with limited programmatic expertise. This is reflected in its manual development of workflows.
# Why is it not sufficient
- Limited ability to combine with other pipelines.
- Friction and slowness of adjusting parameters by hand.
- The large amount of dependencies.
# Why do we need something like cp measure
- Some recently developed tools have tried to fill this unoccupied software niche [cite:@comoletHighlyEfficientScalable2024;@spacrEinarOlafssonSpacr2025], but their features have completely independent implementations from the original ones, thus are not guaranteed to reproduce existing results. Additionally, their implementations do not provide enough modularity and scalability without costly cloud services.

** Engineered features in the era of Deep Learning
# Directly mathematically interpretable
# DL is not always better-performing
# DL requires (ok, requires may be too strong here!) training on a given dataset and appropriate samples may not be available for training and itâ€™s a pain
# DL needs interpretation (and engineered features can help in that process?)
While deep learning embeddings of images have become available in recent years [TODO: add citation], these do not provide much information with regards to biological interpretability.
# Importance of these features for ML/DL pipelines in cell microscopy data
# Target users: biologists seeking automation and reproducibility, CS/Data scientists needing APIs to build their pipelines
* Measurement library as a solution to scale-up interpretable biological image analysis
# Measurement parity with CellProfiler extending from original implementation
# Scikit-image style API for ease of use
# Faster than CellProfiler (May require brief benchmarking)
- Recapitulate all feature types: Single, multi-image and multi-object features.
- Scikit-image style
- Faster than CellProfiler (TODO add benchmark)

** Usage scenarios
# JUMP data: Recreate data from JUMP where masks are available (JUMP data, Alan's short analysis)
# Extracting features from 3D data (Alex's data, Alan's short analysis)
# Beyond morphology screening: Spatial transcriptomics data (Tim's data and analysis)

* Conclusion/Discussion
# Reproducibility through code-based workflows
# Reduced reliance on GUI interfaces
# Interpretable features for morphological profiling

# cp_measure as an accessible way to obtain single-object measurements for microscopy measurements within Python
# Engineered features complement deep learning and together provide a better mechanistic understanding of the underlying biology.
# It complements generalist tools like Cellpose.
# If integrated back to CellProfiler, it will enable the design and implementation of new measurements when necessary.

* Future work
- Contributing back to the CellProfiler code base

#+print_bibliography: 
