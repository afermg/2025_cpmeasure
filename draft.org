#+bibliography: bibliography.bib
#+cite_export: natbib icml2025

#+OPTIONS: toc:nil author:nil title:nil ^:nil date:nil
#+LATEX_CLASS: article-minimal
#+LATEX_HEADER: \input{style/header.tex}
#+LATEX_HEADER: \usepackage[inkscapelatex=false]{svg}

#+begin_export latex
\twocolumn[
\icmltitle{cp\_measure: Morphological features from biological imaging}

% It is OKAY to include author information, even for blind
% submissions: the style file will automatically remove it for you
% unless you've provided the [accepted] option to the icml2025
% package.

% List of affiliations: The first argument should be a (short)
% identifier you will use later to specify author affiliations
% Academic affiliations should list Department, University, City, Region, Country
% Industry affiliations should list Company, City, Region, Country

% You can specify symbols, otherwise they are numbered in order.
% Ideally, you should not use this facility. Affiliations will be numbered
% in order of appearance and this is the preferred way.
\icmlsetsymbol{equal}{*}

\begin{icmlauthorlist}
\icmlauthor{Alan F. Munoz}{broad}
\icmlauthor{Tim Treis}{hh,broad}
\icmlauthor{Alexandr A. Kalinin}{broad}
\icmlauthor{Shatavisha Dasgupta}{broad}
\icmlauthor{Fabian Theis}{hh}
\icmlauthor{Shantanu Singh}{broad}
\icmlauthor{Anne E. Carpenter}{broad}
\end{icmlauthorlist}

\icmlaffiliation{broad}{Broad Institute of MIT and Harvard, United States}
\icmlaffiliation{hh}{Institute of Computational biology, Helmholtz Munich, Germany}

\icmlcorrespondingauthor{Shantanu Singh}{shantanu@broadinstitute.org}

% You may provide any keywords that you
% find helpful for describing your paper; these are used to populate
% the "keywords" metadata in the PDF but will not be shown in the document
\icmlkeywords{Machine Learning, ICML}

\vskip 0.3in
]

% this must go after the closing bracket ] following \twocolumn[ ...

% This command actually creates the footnote in the first column
% listing the affiliations and the copyright notice.
% The command takes one argument, which is text to display at the start of the footnote.
% The \icmlEqualContribution command is standard text for equal contribution.
% Remove it (just {}) if you do not need this facility.

\printAffiliationsAndNotice{}  % leave blank if no need to mention equal contribution
% \printAffiliationsAndNotice{\icmlEqualContribution} % otherwise use the standard text.

#+end_export

#+begin_export latex
\begin{abstract}
Quantifying the contents of objects in images is a common challenge in biological imaging. The most widely used software to process imaging data requires manual intervention. Here we introduce our library cp\_measure, which provides programmatic access to the most widespread metrics for bioimage analysis. We then demonstrate that the features are consistent to the standard ones and provide some examples for which our tool is more suitable than the alternatives. cp\_measure opens the gates for community-driven  development and expansion of bioimage analysis, increasing both the accessibility and reproducibility of the field.
\end{abstract}
#+end_export

* Introduction
# What is morphological profiling

The field of biological imaging leverages data from cell microscopy images to obtain biological insights. Through microscopy techniques we can obtain information from a multitude of sources, such as illumination, fluorescent dyes or even proteins tagged with other proteins that fluoresce, acting as a beacon and providing information on quantity and/or localization.

The main task at the core bioimage analysis is identifying features that convey information of the state of a cell or its contents. This entails combining identified objects with pixel data to quantify their morphology and other information sources, such as intensity distributions.

Morphological profiling a subfield of bioimaging that focuses on the cells and the shapes and properties of their organelles. It is usually supported by both statistical methods as well as machine and deep learning approaches. One of its biggest applications is drug discovery, where it is used primarily due to its low acquisition cost and capabilities for scaling to screen many compounds efficiently. It can also function as a complement to other high throughput techniques, such as genomics.

** The current state of bioimage analysis
# What is CP
The most widely-used software to process biological imaging data is CellProfiler [cite:@stirlingCellProfiler4Improvements2021]. Its target users are biologists with limited programmatic expertise. The accessibility that manually implemented workflows reduces its suitability for automated analyses and the composition of more complex pipelines.

# Why is it not sufficient
The usage of Cellprofiler entails a higher degree of friction for composite pipelines that orchestrate multiple tools. Its focus on manually-defined workflows adjusted for specific use-cases makes it less suitable for many high throughput analyses. Additionally, CellProfiler has a significant number of dependencies. It depends on libraries from both Python and Java languages, thus increasing the complexity of setting it up in an environment where other may abound. Tough containers partially alleviate this problem, they carry additional complexity and caveats.

# Current limitations of the field
A small subset of the features in CellProfiler is provided by scikit-image, but this is greatly limited and cannot be reliably compared to the existing body of work that used CellProfiler to obtain the measurements. The other big problem of CellProfiler is its dependency on human interaction at many steps of the analysis, opening the door to human mistakes and hindering analyses reproducibility.

# CP is limited as  pluggable tool
A CellProfiler-build pipeline requires cannot easily integrate with others. Its existing plug-in system is inaccessible for most users and has strong limitations. Building automated pipelines that contain CellProfiler and integrating tools within its components are time and effort-consuming challenges.

# Why do we need something like cp measure
In this space there is a vacuum for a software library that covers the generalistic and high throughput use-cases for which CellProfiler is inadequate. Distributed CellProfiler would cover this case if not for its cloud-only approach and dependency on preconfigured pipelines, as well as its limited debugging capabilities [cite:@mcquinCellProfiler30Nextgeneration2018].

# Existing attempts
Other recent software has been published aiming to fill this unoccupied niche, but their solutions are unsuitable for practical usage at scale: First, their features have completely independent implementations from the original ones, thus are not guaranteed to reproduce existing results and the biological interpretations may be different from the current field standard. Additionally, their implementations are not modular nor scale well upon increases to the data size. Some of them, akin to Distributed CellProfiler, are based on main use-case is cloud services.

** Engineered features in the era of Deep Learning
The unprecedented evolution of deep learning methods in recent years has made available many different ways to process imaging data. Nevertheless, these are limited in their capacity to provide biological interpretation [cite:@moenDeepLearningCellular2019].

# Directly mathematically interpretable
Unlike with deep learning-based features, whose interpretation requires complex methods such as counterfactuals or attention maps, most of the engineered features have a mathematical definition that is vastly simpler to translate into biological insights.

# DL is not always better-performing
Engineered features can also outperform deep learning ones under some conditions [cite:@tangMorphologicalProfilingDrug2024]. Though deep learning features are more likely to improve in the coming years

# DL requires training on a given dataset and appropriate samples may not be available for training and itâ€™s a pain
It also has a higher barrier of entry, since most models require annotating data for training and testing. Even new foundational models do not generalize well for out-of-distribution data.

# Target users: biologists seeking automation and reproducibility, CS/Data scientists needing APIs to build their pipelines
The main target users of such a tool would be biologists in need of automation and reproducibility, as well as computer and data scientists that want to dive into the field of biological imaging.

# Importance of these features for ML/DL pipelines in cell microscopy data
As a whole, there is still a role to be played for engineered features. The community is missing a generalist tool that converts images and masks into vectors in an automated fashion and portable across fields. It serves as complementary approach deep learning methods.

* cp_measure: Extraction of interpretable features
# Measurement parity with CellProfiler extending from original implementation

With cp_measure we recapitulated all features used in the vast majority of experiments: One object and one imaging channel (e.g., intensity), one object and multiple channels (e.g., Manders correlation) and multiple objects (e.g., number of neighbors).
#+CAPTION: Our library extracts metrics from images within the region defined by objects masks. Its produces measurements for every object.
#+NAME: fig:overview
[[./figs/cpmeasure_overview.svg]]

  
# Extensibilty
cp_measure's code base branches off CellProfiler's by separating the user interface and the orchestration logic from the math. It improves reusability, testability and its makes it possible for more people to access and improve its internals in the future. It aims to be a stepping stone to increased extensibility and maintainability.

# Scikit-image style API for ease of use
Our library aims to remain consistent with the current scientific python ecosystem. The main interface matches that of the widely-used scikit-image [cite:@waltScikitimageImageProcessing2014]. This greatly reduces the effort needed to integrate it in existing workflows and tools.
  
By isolating and cleaning the implemented mathematics of CellProfiler we aim to make its featurization methods more accessible to computer and data scientists, leveraging the decade and a half of existing features. 

# Faster than CellProfiler (May require brief benchmarking)
When comparing the equivalent pipelines, cp_measure's minimal overhead results in faster processing times than CellProfiler (TODO add benchmark).


# Overview of usage
We demonstrate the correlation of cp_measure compared to a comparable CellProfiler pipeline using a representative subset of the JUMP dataset [TODO JUMP-CP citation]. Then we demonstrate cases in which cp_measure can help identify biological phenotypes: first using 3D images of astrocytes and then using spatial transcriptomics dataset. These use-cases demonstrate its widespread applicability.

# JUMP data: Recreate data from JUMP where masks are available (JUMP data, Alan's short analysis)
** We recapitulate CellProfiler measurements

Our first aim was to validate the features from cp_measure compared to the CellProfiler standard ones. We used images from the JUMP dataset, containing more than 130,000 chemical and genetic perturbations. We first curated a set of genetic perturbations that, based on existing analyses, contained cells with distinctive morphologies to all others based on the CellProfiler features. We then segmented the cytosol and nuclei of the cells using a CellProfiler pipeline to obtain both segmentation masks and the original morphological features.

We used the segmentation masks to calculate the cp_measure features. Then we mapped the features from CellProfiler to cp_measure and compared the values in both. Figure  [[fig:cp_vs_cpmeasure]] shows this comparison. Then we demonstrate that we recapitulate the CellProfiler features.


#+CAPTION: [Placeholder] Comparison of CellProfiler and cp_measure.
#+NAME: fig:cp_vs_cpmeasure
[[./figs/astro3d.svg]]

** Results and examples of usage
*** Classification of astrocytes and their distinctive features
# Extracting features from 3D data (Alex's data, Alan's short analysis)
As a proof of concept, we showcased that cp_measure can be used in a workflow to train a classifier for cell populations. We used it to process 433 3D images of astrocytes containing 831 cells [TODO Cite Alex's astrocytes paper]. We then calculated the median value for every feature in a cell and the number of cells, following standard procedures [TODO Cite pycytominer]. Then we trained a Gradient Boosting classifier to identify which day. With this we identified which features distinguish cells on the later samples and distinguish sub-populations. It is worth noting that there will be some redundancy in the information contained in the cp_measure features, and thus during cases in which multiple features inform on the same groups of cells Shapley values is likely to only capture one of them.

#+CAPTION: Shapley values of most important features to classify the day in which an image was taken (a multi-class classification task). The test data accuracy is shown in bold. Our results showcased the axis length of the cell to be a major indicator of phenotypic effect, implying that cells became more elongated on their minor axis. 
#+NAME: fig:astrocytes
[[./figs/shap.svg]]

*** Applicability on spatial transcriptomics
# Beyond morphology screening: Spatial transcriptomics data (Tim's data and analysis)
#+CAPTION: [PLACEHOLDER] Spatial omics analysis
#+NAME: fig:spatial_omics
[[./figs/axon3d.svg]]

* Discussion
#  The goal is to import it back into CP eventually anyway, so this feels very clean
# "Proposals for better workflows or incentives for open-source development and maintenance in ML"

# Reproducibility through code-based workflows
The usage of manually-encoded workflows hinders reproducibility and may render different datasets incomparable. cp_measure provides an easier way to automate the processing of microscopy data both in short scripts as well as complex pipelines.
  
# Reduced reliance on GUI interfaces
Reducing our reliance in graphical interfaces brings about better scaling capabilities for high-content microscopy data without the need of cloud-based infrastructure.
  
# Interpretable features for morphological profiling
The biologically interpretable features provided by cp_measure complement deep learning ones and offer a better mechanistic understanding of the underlying biology. When used in tandem with generalist tools it helps compose larger and faster pipelines.
  
# Other adjacent fields
These measurements have already been used in non-biological context, thus cp_measure metrics also benefit other scientific fields beyond morphological profiling.
# cp_measure as an accessible way to obtain single-object measurements for microscopy measurements within Python
# Engineered features complement deep learning and together provide a better mechanistic understanding of the underlying biology.

* Future work
There are multiple paths to improve and expand the functionality of cp_measure. The first and most obvious is to integrate its measurements back to CellProfiler library. This would ensure that the results from pipelines built with either tool will be comparable in the future, while also providing the opportunity of formalizing the programmatic interface --- inputs and outputs --- of measurements.

Developing a comprehensive tests suite would guarantee mathematical correctness under the possible edge cases that may be encountered when dealing with new data. This test suite in turn would in turn open the door to further speed ups in multiple ways: First of all, optimizing the measurements that consume the most time, starting with object granularity (~80% of the time). Additionally, it is possible to implement measurements using numba for just-in-time compiling and/or adding GPU support [TODO cite numba].

We envision cp_measure can be the place to develop and distribute new measurements. While CellProfiler's measurements are widely used in bioimaging studies, the existing palette of measurements could be further extended to cover novel use-cases brought upon by novel developments in imaging acquisition devices and methods. Working with the community to further the number of measurements to better match the current questions scientists pose to imaging data.

There are a couple of other features that would be useful for the community: First, a wrapper to call measurements on the fly, similar to scikit-image's regionprops. Second, a list of essential measurements for use-cases where speed is more important than using all the features.
#+print_bibliography: 

* Suplementary                                                     :noexport:
Move here anything that should go in the supplementary material.
